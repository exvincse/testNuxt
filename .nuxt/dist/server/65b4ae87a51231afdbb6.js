exports.ids=[0],exports.modules={44:function(t,e,o){"use strict";o.r(e);var n=o(14),r=o.n(n),c=o(11);var d={namespaced:!0,state:()=>({count:0,isLoading:!1}),mutations:{SET_COUNT(t,e){t.count=e},SET_LOADING(t,e){t.isLoading=e}},actions:{GET_COUNT:({state:t,commit:e})=>!t.isLoading&&new Promise(t=>{e("SET_LOADING",!0),setTimeout(()=>{let o=10*Math.random()>>0;e("SET_COUNT",o),e("SET_LOADING",!1),t(o)},1500)})}},l={layout:"blue",data:()=>({title:"About",random:[],ary:[]}),head(){return{title:this.title,meta:[{hid:this.title,name:this.title}]}},async asyncData({store:t}){},async fetch({app:t,store:e}){let o=[];await r.a.get("https://randomuser.me/api/").then(t=>{o=t.data.results}).catch(t=>{console.log(t)}),e.dispatch("apiData",o),console.log("fetch")},async beforeCreate(){console.log(this),this.$registerModule(this.$store,{Counter:d})},created(){console.log("created")},beforeDestroy(){this.$unregisterModule(this.$store,["Counter"])},computed:{count:{...Object(c.mapState)("Counter",{get:"count"}),...Object(c.mapMutations)("Counter",{set:"SET_COUNT"})}},methods:{...Object(c.mapActions)("Counter",{getCount:"GET_COUNT"})}},h=o(1);var component=Object(h.a)(l,(function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",[t._ssrNode("<h1>About</h1> <div>"+t._ssrEscape("\n        "+t._s(t.$store.state.apiData)+"\n    ")+"</div> <p>"+t._ssrEscape(t._s(t.$store.state.message))+"</p> "+(t.$store.state.Counter?t.$store.state.Counter.isLoading?"<div><h2>Loading...</h2></div>":"<div><h2>"+t._ssrEscape(t._s(t.count))+"</h2> <p><button>-</button> <button>+</button></p> <p><button>Get Count</button></p></div>":"\x3c!----\x3e"))])}),[],!1,(function(t){}),null,"3624d4c0");e.default=component.exports}};